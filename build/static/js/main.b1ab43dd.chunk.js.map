{"version":3,"sources":["Common.js","AppContext.js","components/MovieDetails.js","components/MovieList.js","components/Home.js","components/Navbar.js","components/Favorites.js","components/WatchList.js","App.js","serviceWorker.js","index.js"],"names":["api_key","base_uri","getMoviePoster","item","poster_path","getVideoSiteUrl","g","site","key","AppContext","React","createContext","favorites_list","JSON","parse","localStorage","getItem","favorites_list_set","forceRemove","this","id","save","title","watch_list","watch_list_set","setItem","stringify","MovieDetails","movieId","onClose","movieItem","context","useContext","useState","movieDetails","setMovieDetails","movieVideos","setMovieVideos","useEffect","fetch","then","res","json","data","fetchMovieVideos","results","className","onClick","style","textAlign","src","width","border","background","Date","release_date","getFullYear","genres","map","i","name","overview","href","e","target","innerHTML","MovieList","lastFetchTime","list","loading","fetchMore","setMovieId","list_area","useRef","movie_list","infiniteScroll","current","scrollTop","window","innerHeight","clientHeight","now","addEventListener","removeEventListener","ref","index","role","classList","remove","add","Home","search_text","location","useLocation","setLoading","moviesList","setMoviesList","page_number","total_pages","fetchMovies","text","a","console","log","url","page","prevList","hash","replace","Navbar","onSearch","searchText","setSearchText","main_navbar","height","alt","toggle","type","onSubmit","value","onChange","placeholder","Favorites","Object","entries","o","WatchList","App","Provider","basename","path","exact","strict","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b1ab43dd.chunk.js","sourcesContent":["export const api_key = \"fec8b5ab27b292a68294261bb21b04a5\"\r\nexport const base_uri = \"http://api.themoviedb.org/3/\"\r\nexport const images_uri = \"https://image.tmdb.org/t/p/w300\"\r\n\r\n// common and global functionality \r\n\r\nexport const getMoviePoster= (item)=>{\r\n    if (item.poster_path === null) {\r\n      return \"no-poster.jpg\"\r\n    }\r\n    else {\r\n       return images_uri + item.poster_path;\r\n    }\r\n}\r\n\r\nexport const getVideoSiteUrl= (g)=>{\r\n   if(g.site === \"YouTube\" ) return `https://www.youtube.com/watch?v=${g.key}`;\r\n   if(g.site === \"Vimeo\" ) return `https://vimeo.com/${g.key}`;\r\n   else return '#';\r\n\r\n}\r\n\r\nexport const fetchMovieDetails=(id)=>{\r\n    return fetch(`${base_uri}movie/${id}?api_key=${api_key}`);\r\n}\r\n\r\nexport const fetchMovieVideos=(id)=>{\r\n    return fetch(`${base_uri}movie/${id}/videos?api_key=${api_key}`);\r\n}","import React from 'react';\n\n\n// global application context object to maintain favorites and watch list and store in localstorage\nconst AppContext = React.createContext({\n  favorites_list: JSON.parse(localStorage.getItem(\"favorites_list\") ||'{}'),  \n  favorites_list_set: function (item, forceRemove) {\n    if (this.favorites_list[item.id] || forceRemove) {\n      delete this.favorites_list[item.id]      \n      this.save();\n      return false;\n    }\n    this.favorites_list[item.id] = { id: item.id, title: item.title, poster_path: item.poster_path }\n    this.save();    \n    return true;\n  },\n  watch_list: JSON.parse(localStorage.getItem(\"watch_list\") ||'{}'),\n  watch_list_set: function (item, forceRemove) {\n    if (this.watch_list[item.id] || forceRemove) {\n      delete this.watch_list[item.id]      \n      this.save();\n      return false;\n    }\n    this.watch_list[item.id] = { id: item.id, title: item.title, poster_path: item.poster_path }\n    this.save();    \n    return true;\n  },\n\n  save:function(){\n    localStorage.setItem('favorites_list',JSON.stringify(this.favorites_list))\n    localStorage.setItem('watch_list',JSON.stringify(this.watch_list))\n  },\n\n});\nexport default AppContext;","import React, { useEffect, useContext, useState } from 'react';\r\nimport AppContext  from '../AppContext'\r\nimport { getMoviePoster, fetchMovieDetails, fetchMovieVideos, getVideoSiteUrl } from '../Common'\r\n\r\nconst MovieDetails = ({ movieId, onClose,movieItem }) => {\r\n\r\n  const context = useContext(AppContext);\r\n  //states for movie details and videos\r\n  const [movieDetails, setMovieDetails] = useState(null);\r\n  const [movieVideos, setMovieVideos] = useState(null);\r\n\r\n  // load movie details and videos when component mounted\r\n  useEffect(() => {\r\n    if(!movieId && movieItem){\r\n      movieId=movieItem.id;\r\n      setMovieDetails(movieItem);\r\n      return;\r\n    }\r\n    fetchMovieDetails(movieId).then(res => res.json().then((data) => {\r\n      setMovieDetails(data);\r\n      fetchMovieVideos(movieId).then(res => res.json().then((data) => {        \r\n        setMovieVideos(data.results);\r\n      }))\r\n    }))\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"movie-details\">\r\n      <span className=\"x-squar-fill-icon\" onClick={onClose} ></span>\r\n      {movieDetails ? <div className=\"row\">\r\n        <div className=\"col-sm-6\"><p style={{ textAlign: \"center\" }}><img src={getMoviePoster(movieDetails)} width=\"250\" /></p> </div>\r\n        <div className=\"col-sm-6\">\r\n          <div className=\"card\" style={{ border: \"none\", background: \"none\" }}>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{movieDetails.title}({new Date(movieDetails.release_date).getFullYear()})</h5>\r\n              <h6 className=\"card-subtitle mb-2 text-muted\">{movieDetails.release_date}&nbsp;<br />\r\n                {movieDetails.genres ? movieDetails.genres.map((g, i) => {\r\n                  return <span key={i}>&nbsp;|&nbsp;<a>{g.name}</a></span>\r\n                }) : ''}\r\n              </h6>\r\n              <p className=\"card-text\" style={{ textAlign: \"justify\" }}>{movieDetails.overview}</p>\r\n              <a href=\"#\" className=\"btn btn-sm btn-primary\" onClick={(e) => {\r\n                if (context.watch_list_set(movieDetails)) {\r\n                  e.target.innerHTML = 'Remove from watch list'\r\n                }\r\n                else {\r\n                  e.target.innerHTML = 'Add to watch list'\r\n                }\r\n              }} >{context.watch_list[movieDetails.id] ? 'Remove from watch list' : 'Add to watch list'}</a>\r\n            &nbsp;\r\n\r\n            <a href=\"#\" className=\"btn  btn-sm btn-info\" onClick={(e) => {\r\n                if (context.favorites_list_set(movieDetails)) {\r\n                  e.target.innerHTML = 'Remove from faviorate'\r\n                }\r\n                else {\r\n                  e.target.innerHTML = 'Add to favorites'\r\n                }\r\n              }}>{context.favorites_list[movieDetails.id] ? 'Remove from favorites' : 'Add to faviorates'}</a>\r\n              <h5><br /> Trailers</h5>\r\n              {movieVideos ? movieVideos.map((g, i) => {\r\n                return (<span key={i}>&nbsp;<a target=\"_blank\" href={getVideoSiteUrl(g)}>{g.site}</a><br /></span>)\r\n              }) : ''}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div> : <div className=\"spinner-border\">\r\n          <span className=\"sr-only\"></span>\r\n        </div>}\r\n\r\n    </div>\r\n  )\r\n\r\n};\r\n\r\nexport default MovieDetails","import React, { useEffect, useRef, useContext,useState } from 'react';\r\nimport { getMoviePoster } from '../Common'\r\nimport  AppContext  from '../AppContext'\r\nimport MovieDetails from './MovieDetails'\r\n\r\nconst MovieList = ({ list, loading, fetchMore }) => {\r\n\r\n  const context = useContext(AppContext);\r\n  const [movieId, setMovieId] = useState(null);\r\n \r\n  // references to DOM elements \r\n  const list_area = useRef()\r\n  const movie_list = useRef()\r\n  let lastFetchTime;\r\n\r\n  // handle infinite scroll and load next pages\r\n  const infiniteScroll = () => {\r\n    if (list_area.current.scrollTop + window.innerHeight > movie_list.current.clientHeight) {\r\n      \r\n      // control multiple trigger during scroll\r\n      if (loading | Date.now() - lastFetchTime < 1000) return;\r\n      lastFetchTime = Date.now();\r\n      if (fetchMore) fetchMore();\r\n    }\r\n  };\r\n\r\n  // execute when component mounted\r\n  useEffect(() => {\r\n    lastFetchTime = 0;\r\n    list_area.current.addEventListener('scroll', infiniteScroll)\r\n    // executes when component unmounted\r\n    return () => {\r\n      list_area.current.removeEventListener('scroll', infiniteScroll)\r\n    };\r\n  }, [])\r\n  \r\n  return (\r\n    <> \r\n      <div className=\"movie-list-area\" ref={list_area}>\r\n        <ul ref={movie_list} className='list-unstyled'>        \r\n          {list && list.map((item, index) => (\r\n            <li key={index} className=\"media col-sm-6\">\r\n              <img src={getMoviePoster(item)}  onClick={()=>setMovieId(item.id)} />\r\n              <div className=\"media-body\">\r\n                <h6 className=\"media-title\" onClick={()=>setMovieId(item.id)} > {item.title}</h6>\r\n                <span role=\"fav-icon\" className={context.favorites_list[item.id] ? 'fill-star-icon' : 'star-icon'}\r\n                  onClick={(e) => {\r\n                    e.target.classList.remove(\"star-icon\")\r\n                    e.target.classList.remove(\"fill-star-icon\")\r\n                    if (context.favorites_list_set(item)) {\r\n                      e.target.classList.add(\"fill-star-icon\")\r\n                    }\r\n                    else {\r\n                      e.target.classList.add(\"star-icon\")\r\n                    }\r\n                  }} ></span>\r\n              </div>\r\n            </li>\r\n          ))}\r\n\r\n\r\n          {loading && <li className='media col-sm-6'>Loading...</li>}\r\n        </ul>\r\n      </div>\r\n      {movieId ? <MovieDetails movieId={movieId} onClose={()=>setMovieId(null)} /> : ''}\r\n    </>)\r\n\r\n\r\n};\r\n\r\nexport default MovieList","import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport MovieList from './MovieList'\r\nimport { api_key, base_uri } from '../Common'\r\n\r\nconst Home = () => {\r\n  const location = useLocation()\r\n  const [loading, setLoading] = useState(false);\r\n  const [moviesList, setMoviesList] = useState([]); // movie list state\r\n\r\n  let page_number = 1;\r\n  let search_text;\r\n  let total_pages = 1;\r\n\r\n  // function to fetch movies in pages from api \r\n  const fetchMovies = async (text) => {\r\n    text = text || search_text;\r\n    if (page_number > total_pages) return;\r\n    search_text = text;\r\n    setLoading(true);\r\n    console.log(\"search_text\", search_text)\r\n    const url = search_text ?\r\n      `${base_uri}search/movie?api_key=${api_key}&query=${text}&page=${page_number}` :\r\n      `${base_uri}movie/upcoming?api_key=${api_key}&page=${page_number}`;\r\n    const res = await fetch(url);\r\n    res.json().then(data => {\r\n      total_pages = data.total_pages;\r\n      page_number = data.page + 1;\r\n      setMoviesList((prevList) => [...prevList, ...data.results]);\r\n      setLoading(false);\r\n    })\r\n  };\r\n\r\n  //initialize home page whenever reloaded\r\n  useEffect(() => {\r\n    page_number = 1;\r\n    total_pages = 1;\r\n    setMoviesList([]);\r\n    if (location.hash) {\r\n      fetchMovies(location.hash.replace('#', ''));\r\n    }\r\n    else {\r\n      fetchMovies();\r\n    }\r\n  }, []);\r\n\r\n  return (<MovieList fetchMore={fetchMovies} list={moviesList} loading={loading} />)\r\n\r\n\r\n};\r\n\r\nexport default Home","import React, { useRef, useState } from 'react';\r\n\r\nconst Navbar = ({ onSearch }) => {\r\n\r\n  // top navigation bar\r\n  const [searchText, setSearchText] = useState(\"\");\r\n\r\n  const main_navbar = useRef()\r\n  return (<div className=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\">\r\n    <a className=\"navbar-brand\" href=\"#\">\r\n      <img role=\"app-logo\" src=\"tickets.svg\" width=\"26\" height=\"26\" className=\"d-inline-block align-top\" alt=\"\" />\r\n    &nbsp;MovieKeeper\r\n  </a>\r\n\r\n    <button className=\"navbar-toggler\" onClick={e => main_navbar.current.classList.toggle(\"collapse\")} type=\"button\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" ref={main_navbar} >\r\n\r\n      <ul className=\"navbar-nav  mr-auto\" onClick={(e) => {\r\n        main_navbar.current.classList.add(\"collapse\")\r\n      }}>\r\n        <li className=\"nav-item \">\r\n          <a className=\"nav-link\" href=\"/index.html\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#favorites\">My Favorites</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#watchlist\">Watch List</a>\r\n        </li>\r\n      </ul>\r\n      <form className=\"form-inline my-2 my-lg-0\" onSubmit={() => {\r\n        main_navbar.current.classList.add(\"collapse\")\r\n        window.location.hash = `search#${searchText}`\r\n      }}  >\r\n        <div className=\"input-group mb-3\">\r\n          <input type=\"text\" className=\"form-control\" value={searchText} onChange={(e) => {\r\n\r\n            setSearchText(e.target.value);\r\n          }} placeholder=\"Movie title\" />\r\n          <div className=\"input-group-append\">\r\n            <button className=\"btn btn-outline-secondary\" type=\"submit\">Search</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n\r\n  </div>)\r\n\r\n\r\n};\r\n\r\nexport default Navbar","import React, { useContext } from 'react';\r\nimport  AppContext  from '../AppContext'\r\nimport MovieList from './MovieList'\r\nconst Favorites = ({ list, loading, fetchMore }) => {\r\n  const context = useContext(AppContext);  \r\n  console.log(\"context.favorites_list\",context.favorites_list);\r\n  return (<MovieList  list={Object.entries(context.favorites_list).map((o)=>o[1])} />)\r\n};\r\n\r\nexport default Favorites","import React, { useContext } from 'react';\r\nimport  AppContext  from '../AppContext'\r\nimport MovieList from './MovieList'\r\nconst WatchList = ({ list, loading, fetchMore }) => {\r\n  const context = useContext(AppContext);  \r\n  return (<MovieList  list={Object.entries(context.watch_list).map((o)=>o[1])} />)\r\n};\r\n\r\nexport default WatchList","import React,{useContext} from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\n//components\nimport Home from './components/Home';\nimport Navbar from './components/Navbar';\nimport Favorites from './components/Favorites';\nimport WatchList from './components/WatchList';\nimport AppContext from './AppContext'\nimport './App.css';\n\nconst App = () => {\n\n\n  return (<>\n    <Navbar />\n    <AppContext.Provider value={useContext(AppContext)}>\n    <HashRouter basename=\"index.html\">         \n    <Route path=\"/favorites\" exact strict component={Favorites} />\n      <Route path=\"/watchlist\" exact strict component={WatchList} />\n      <Route path=\"/search\" exact   component={Home} />       \n      <Route path=\"/\" exact   component={Home} />       \n      <Route path=\"/search:text\" component={Home}  />\n\n    </HashRouter>      \n    </AppContext.Provider>\n\n  </>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}